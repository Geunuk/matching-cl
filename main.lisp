(defparameter *size* nil)
(defparameter rank-a nil)
(defparameter rank-b nil)
(defparameter select-a nil)
(defparameter select-b nil)
(defparameter queue-a nil)
(defparameter queue-b nil)
(defparameter num-matching 0)

(defun init ()
  (with-open-file (in "input.txt")
    (setf *size* (read in))
    (setf rank-a (make-array (list *size* *size*)))
    (loop for r below *size* do (loop for c below *size* do (setf (aref rank-a r c) (read in))))

    (setf rank-b (make-array (list *size* *size*)))
    (loop for r below *size* do (loop for c below *size* do (setf (aref rank-b r c) (read in))))

    (setf queue-a (make-array *size* :initial-element (loop for i below *size* collect i)))
    (setf queue-b (make-array *size* :initial-element '()))
    
    (setf select-a (make-array *size* :initial-element -1))
    (setf select-b (make-array *size* :initial-element -1))))

(defun find-max-idx-a (aidx)
  (let ((ret -1)
	(max-val -1))
    (loop for bidx in (aref queue-a aidx) if (and (= (aref select-b bidx) -1)
						  (> (aref rank-a aidx bidx) max-val))
	  do (progn (setf ret bidx)
		    (setf max-val (aref rank-a aidx bidx))))
    (setf (aref queue-a aidx) (remove ret (aref queue-a aidx)))
    ret))

(defun find-max-idx-b (bidx)
  (let ((ret -1)
	(max-val -1))
    (loop for aidx in (aref queue-b bidx) if (and (= (aref select-a aidx) -1)
						  (> (aref rank-b bidx aidx) max-val))
	  do (progn (setf ret aidx)
		    (setf max-val (aref rank-b bidx aidx))))
    ret))
  
(defun choice-a (aidx)
  (if (= (aref select-a aidx) -1) ; if not choosen
      (push aidx (aref queue-b (find-max-idx-a aidx))))) 

(defun choice-b (bidx)
  (if (= (aref select-b bidx) -1)
      (let ((aidx (find-max-idx-b bidx)))
	(unless (= aidx -1)
	  (setf (aref select-a aidx) bidx)
	  (setf (aref select-b bidx) aidx)
	  (setf num-matching (1+ num-matching))))))

(defun matching ()
  (loop until (= num-matching *size*)
	do (progn (loop for i below *size* do (choice-a i))
		  (loop for i below *size* do (choice-b i))
		  (print select-a)
		  (print select-b)
		  (print queue-a)
		  (print queue-b)
		  (fresh-line))))

(init)
(matching)
